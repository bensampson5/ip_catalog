name: ci

on:
  push:
    branches:
      - '**'
    tags:
      - 'v*'

jobs:

  # This job builds and updates the docker images on the OpenHDL's Docker Hub. It will create and push a 
  # new image if any of the following conditions apply:
  #   1. This is a new commit to the 'main' branch.
  #   2. If a tag for this branch does not already exist on OpenHDL's Docker Hub.
  #   3. If the Dockerfile in the top project directory changed in the most recent commit.
  docker:
    runs-on: ubuntu-latest
    steps:
      - 
        name: Checkout
        uses: actions/checkout@v2
        with:
          fetch-depth: 2
      - 
        name: Check if Dockerfile changed in last commit
        run: | 
          echo "DOCKERFILE_CHANGED=$(git diff --name-only HEAD~1 HEAD | grep -c Dockerfile)" >> $GITHUB_ENV       
      - 
        name: Docker meta
        id: docker_meta
        uses: crazy-max/ghaction-docker-meta@v1
        with:
          images: bensampson5/openhdl
      - 
        name: Check if docker image already exists
        run: | 
          echo '{"experimental": "enabled"}' > ~/.docker/config.json;
          if [[ $(docker manifest inspect ${{ steps.docker_meta.outputs.tags }} 2>/dev/null) ]]; then
            echo "DOCKER_IMAGE_EXISTS=1" >> $GITHUB_ENV;
          else
            echo "DOCKER_IMAGE_EXISTS=0" >> $GITHUB_ENV;
          fi;
      - 
        name: Set up QEMU
        if: env.DOCKERFILE_CHANGED == '1' || env.DOCKER_IMAGE_EXISTS == '0' || github.ref == 'refs/heads/main'
        uses: docker/setup-qemu-action@v1
      - 
        name: Set up Docker Buildx
        if: env.DOCKERFILE_CHANGED == '1' || env.DOCKER_IMAGE_EXISTS == '0' || github.ref == 'refs/heads/main'
        uses: docker/setup-buildx-action@v1
      -
        name: Cache Docker layers
        if: env.DOCKERFILE_CHANGED == '1' || env.DOCKER_IMAGE_EXISTS == '0' || github.ref == 'refs/heads/main'
        uses: actions/cache@v2
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-
      - 
        name: Login to Docker Hub
        if: github.event_name != 'pull_request' && (env.DOCKERFILE_CHANGED == '1' || env.DOCKER_IMAGE_EXISTS == '0' || github.ref == 'refs/heads/main')
        uses: docker/login-action@v1 
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      -
        name: Build and push
        if: env.DOCKERFILE_CHANGED == '1' || env.DOCKER_IMAGE_EXISTS == '0' || github.ref == 'refs/heads/main'
        id: docker_build
        uses: docker/build-push-action@v2
        with:
          context: .
          file: ./Dockerfile
          platforms: linux/amd64
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.docker_meta.outputs.tags }}
          labels: ${{ steps.docker_meta.outputs.labels }}
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,dest=/tmp/.buildx-cache
      -
        name: Image digest
        if: env.DOCKERFILE_CHANGED == '1' || env.DOCKER_IMAGE_EXISTS == '0' || github.ref == 'refs/heads/main'
        run: echo ${{ steps.docker_build.outputs.digest }}
  
  # This job checks that OpenHDL tests can be built and pass.
  openhdl:
    needs: [docker]
    runs-on: ubuntu-latest
    steps:
      -
        name: Checkout
        uses: actions/checkout@v2
      - 
        name: Docker meta
        id: docker_meta
        uses: crazy-max/ghaction-docker-meta@v1
        with:
          images: bensampson5/openhdl
      - 
        name: Pull docker image
        run: |
          docker pull ${{ steps.docker_meta.outputs.tags }}
      - 
        name: Build OpenHDL tests
        run: |
          echo "rm -rf build \
                && mkdir build \
                && cd build \
                && cmake -GNinja .. \
                && ninja" > build.sh \
          && docker run --rm -v $(pwd):/code -w /code ${{ steps.docker_meta.outputs.tags }} /bin/bash build.sh
      -
        name: Run OpenHDL tests
        run: |
          docker run --rm -v $(pwd):/code -w /code/build ${{ steps.docker_meta.outputs.tags }} ninja check
      - 
        name: Check C++ and cmake formatting
        run: |
          docker run --rm -v $(pwd):/code -w /code/build ${{ steps.docker_meta.outputs.tags }} ninja format > format-check-cpp-cmake.txt \
          && docker run --rm -v $(pwd):/code -w /code/build ${{ steps.docker_meta.outputs.tags }} ninja check-format
      - 
        name: If previous step failed, upload artifact with C++/cmake formatting issues.
        if: failure()
        uses: actions/upload-artifact@v2
        with:
          path: format-check-cpp-cmake.txt
      - 
        name: Check HDL formatting
        run: |
          docker run --rm -v $(pwd):/code ${{ steps.docker_meta.outputs.tags }} /code/tools/precommit.py --format-hdl \
          && git diff HEAD > format-check-hdl.txt \
          && git reset --hard HEAD \
          && if [ -s format-check-hdl.txt ]; then \
                 echo "HDL formatting check failed (see below). Please run './tools/precommit.py --format-hdl' locally then recommit and push changes to fix."; \
                 cat format-check-hdl.txt; \
                 exit 1; \
             fi
      - 
        name: If previous step failed, upload artifact with HDL formatting issues.
        if: failure()
        uses: actions/upload-artifact@v2
        with:
          path: format-check-hdl.txt
      - 
        name: Build docs
        run: echo "build docs"
